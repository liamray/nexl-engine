#!/usr/bin/env node

// Module dependencies.
const app = require('./../app');
const debug = require('debug')('nexl-client:server');
const http = require('http');
const openUrl = require('openurl');
const commandLineArgs = require('command-line-args');
const j79 = require('j79-utils');
const winston = j79.winston;

const LOG_LEVEL = 'log-level';
const CMD_LINE_OPTS_DEF = [
	{
		name: 'help',
		alias: 'h',
		type: Boolean,
		defaultValue: false,
		desc: 'Displays available options',
		group: 'Main'
	},

	//////////////////////////////////////////////////////////////////////
	// Network
	{
		name: 'port',
		alias: 'p',
		type: Number,
		defaultValue: 3000,
		desc: 'TCP listening port for nexl-client',
		group: 'Network'
	},

	//////////////////////////////////////////////////////////////////////
	// Logging
	{
		name: LOG_LEVEL,
		alias: 'v',
		type: String,
		defaultValue: 'info',
		desc: 'Available log levels are : ' + Object.keys(winston.levels).join(','),
		group: 'Logging'
	}
];


function printHelpAndExit() {
	console.log('Available command  line options :');
	for (var index in CMD_LINE_OPTS_DEF) {
		var item = CMD_LINE_OPTS_DEF[index];
		console.log('-%s, --%s %s, default value is [%s]', item.alias, item.name, item.desc, item.defaultValue);
	}
	console.log('\nFor example :\nnexl --log-level=debug');
	process.exit();
}

function handleArgs() {
	try {
		module.exports.cmdLineOpts = commandLineArgs(CMD_LINE_OPTS_DEF);
	} catch (e) {
		console.log('Wrong command line options');
		printHelp();
		throw e;
	}

	// is help ?
	if (module.exports.cmdLineOpts.Main.help) {
		printHelpAndExit();
	}
}

// Event listener for HTTP server "error" event.
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

// Event listener for HTTP server "listening" event.
function onListening() {
	var addr = module.exports.server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);

	openUrl.open('http://localhost:' + addr.port);
}

function start() {
	handleArgs();

	winston.level = module.exports.cmdLineOpts.Logging[LOG_LEVEL];

	// Get port from environment and store in Express.
	app.set('port', module.exports.cmdLineOpts.Network.port);

	// Create HTTP server.
	module.exports.server = http.createServer(app);

	// Listen on provided port, on all network interfaces.
	module.exports.server.listen(module.exports.cmdLineOpts.Network.port, 'localhost');
	module.exports.server.on('error', onError);
	module.exports.server.on('listening', onListening);

}

start();